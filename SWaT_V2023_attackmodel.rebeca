
//attack on sensor1
env boolean s1Comp = false; 
env int s1Comp_time = 0; // 0,10,20,30,...,70
env int s1malMsg = 0; //1,2,3 

//attack on sensor2
env boolean s2Comp = false; 
env int s2Comp_time = 0; // 0,10,20,30,...,70
env int s2malMsg = 2; //1,2,3 

//attack on sensor3
env boolean s3Comp = false; 
env int s3Comp_time = 0; // 0,10,20,30,...,70
env int s3malMsg = 0; //1,3 

//attack on pump1
env boolean p1Comp = false;
env int p1Comp_time = 10; 
env int p1malMsg = 1; //1:on,0:off

//attack on pump2
env boolean p2Comp = false;
env int p2Comp_time = 40; 
env int p2malMsg = 0; //1:on,0:off

//attack on valve
env boolean vComp = false;
env int vComp_time = 0; 
env int vmalMsg = 0; //1:open,0:close

//attack on channels
env boolean inj_attk = false;
env int attTime = 0; // 0,10,20,30,...,70
env int chl = 3; //1,2,3,4,5,6
env int malMsg = 3; //(if env int chl == 1,2,3) --> is 1,2,3 (else) --> is 0 , 1 




//Tank1 Initial Status
env boolean tank1_low = true;
env boolean tank1_medium = false;
env boolean tank1_high = false;
//----------------------------------------------------
//Tank2 Initial Status
env boolean tank2_low = true;
env boolean tank2_medium = false;
env boolean tank2_high = false;
//----------------------------------------------------
//Tank3 Initial Status
env boolean tank3_low = true;
env boolean tank3_high = false;
//----------------------------------------------------
// Sense interval for each sensor
env int timingInterval = 10;

reactiveclass PLC1(10){
	knownrebecs{
		Pump1 pump1;
		Valve valve;
	}
	statevars{
		boolean openReqPlc2;
		boolean pump1On;
		boolean valveOpen;
		int sensedTank1WaterLevel;
	}
	PLC1(){	 
		openReqPlc2 = false;
		pump1On = false;
		valveOpen = false;
		sensedTank1WaterLevel = 1;
	}
	@priority(3)
	msgsrv plc1_getsense(int waterLevel){
		sensedTank1WaterLevel = waterLevel;
		if (waterLevel == 1 && pump1On == false) { 
			pump1.pump1_on(); pump1On = true;
		} else if (waterLevel == 2) {
			if(!valveOpen  && openReqPlc2) {
				valve.valve_open(); valveOpen = true;
			} else if(valveOpen  && openReqPlc2) {
				valve.valve_keepOnWaterFlow();
			}
			if(!pump1On){ pump1.pump1_on(); pump1On = true;
			} else { pump1.pump1_keepOnpumping(); }
		} else if (waterLevel == 3) { 
			if(!valveOpen  && openReqPlc2 == true) {
				valve.valve_open(); valveOpen = true;
			} else if(valveOpen && openReqPlc2 == true) { valve.valve_keepOnWaterFlow();
			} if(pump1On) { pump1.pump1_off(); pump1On = false;
			} else if(!openReqPlc2) { valve.valve_close(); valveOpen = false; }
		} 
	}
	@priority(2)
	msgsrv plc1_openReq(){ openReqPlc2 = true; }
	@priority(1)
	msgsrv plc1_closeReq(){ openReqPlc2 = false; valve.valve_close(); valveOpen = false; }

}



reactiveclass PLC2(10){
	knownrebecs{
		PLC1 plc1;
		PLC3 plc3;
	}
	statevars{
		int previous_waterLevel;
		int sensedTank2WaterLevel;
	}
	PLC2(){	 
		previous_waterLevel = 1;
		sensedTank2WaterLevel = 1;
	}
	msgsrv plc2_getsense(int waterLevel){
		sensedTank2WaterLevel = waterLevel;
		if (waterLevel == 1) { 
			plc1.plc1_openReq();
		} else if (previous_waterLevel == 1 && waterLevel == 2) { 
			plc1.plc1_closeReq();
			plc3.plc3_onReq();			
		} else if (previous_waterLevel == 2 && waterLevel == 2) { 
			plc1.plc1_openReq();			
		} else { plc3.plc3_onReq();		}

		previous_waterLevel = waterLevel;
	}
}

reactiveclass PLC3(10){
	knownrebecs {
		Pump2 pump2;
	}
	statevars{
		boolean onReqPlc2;
		int sensedTank3WaterLevel;
	}
	PLC3(){	 
		onReqPlc2 = false;
		sensedTank3WaterLevel = 1;
	}
	@priority(2)
	msgsrv plc3_getsense(int waterLevel){
		sensedTank3WaterLevel = waterLevel;
		if (waterLevel == 3) {
			if(onReqPlc2 == true){
				pump2.pump2_on();
				onReqPlc2 == false;
			} else {
				pump2.pump2_off();
			}
		} else if(waterLevel == 1) { pump2.pump2_off(); }
	}
	@priority(1)
	msgsrv plc3_onReq(){ onReqPlc2 = true; }
}


reactiveclass Tank1(10){
	knownrebecs{
		sensorTank1 sensor;
		Tank2 tank2;
		Valve valve;	
	}
	statevars{
		boolean underFlow,low,medium,high,overFlow;
		
	}
	Tank1(){
		underFlow = false;
		low = tank1_low; 
		medium = tank1_medium;
		high = tank1_high;
		overFlow = false;
		self.tank1_status();
	}
	msgsrv tank1_status(){
		// status: 0 to 4, respectively show underFlow,low,medium,high, and overFlow
		if (underFlow){
		sensor.sensor1_reportStatus(0); 
		} else if (low){
		sensor.sensor1_reportStatus(1);
		} else if (medium){
		sensor.sensor1_reportStatus(2);
		} else if (high){
		sensor.sensor1_reportStatus(3);
		} else if (overFlow){
		sensor.sensor1_reportStatus(4);
		}
		self.tank1_status() after(timingInterval);
	}
	@priority(1)
	msgsrv tank1_waterIncrease(){	
		if (low) { 
			low = false;
			medium = true;
		} else if (medium) { 
			medium = false;
			high = true;
		} else if (high) { 
			high = false;
			overFlow = true;		
		}
		
	}
	@priority(2)
	msgsrv tank1_waterDecrease(){	
		if (high) { 
			high = false;
			medium = true;
		} else if (medium) {
			medium = true;
			low = false;
			tank2.tank2_waterIncrease();

		} else if (low) { 
			low = false;
			underFlow = true;
		}
	}
}


reactiveclass Tank2(15){
	knownrebecs{
		sensorTank2 sensor;
		Tank3 tank3;
		Tank1 tank1;
		reverseUnit unit;
	}
	statevars{
		boolean underFlow,low,medium,high,overFlow;
	}
	Tank2(){
		underFlow = false;
		low = tank2_low; 
		medium = tank2_medium;
		high = tank2_high;
		overFlow = false;
		self.tank2_status();
	}
	msgsrv tank2_status(){	
		if (underFlow){
			sensor.sensor2_reportStatus(0); 
		}else if (low){
			sensor.sensor2_reportStatus(1);
		}else if (medium){
			sensor.sensor2_reportStatus(2);
		}else if (high){
			sensor.sensor2_reportStatus(3);
		}else if (overFlow){
			sensor.sensor2_reportStatus(4);
		}
		self.tank2_status() after(timingInterval);
	}

	msgsrv tank2_waterIncrease(){	
		if (low) { 
			low = false;
			medium = true;
		} else if (medium) { 
			if(sender == tank1) {
				medium = true;
				high = false;
				tank3.tank3_waterIncrease();
			} else {
				medium = false;
				high = true;
				// clean water flows out when tank2 water-level reaches high
				unit.cleanWater(); 				
			}
			
		} else if (high) { 
			high = false;
			overFlow = true;
		}
	}
	msgsrv tank2_waterDecrease(){	
		if (high) { 
			high = false;
			medium = true;
		} else if (medium) { 
			medium = false;
			low = true;
		} else if (low) { 
			low = false;
			underFlow = true;
		}
	}

}

reactiveclass Tank3(10){
	knownrebecs{
		sensorTank3 sensor;
		Tank2 tank2;
	}
	statevars{
		boolean underFlow,low,high,overFlow;
	}
	Tank3(){
		underFlow = false;
		low = tank3_low;
		high = tank3_high;
		overFlow = false;
		
		self.tank3_status();
	}
	msgsrv tank3_status(){	
		if (underFlow){
		sensor.sensor3_reportStatus(0); 
		}else if (low){
		sensor.sensor3_reportStatus(1);
		}else if (high){
		sensor.sensor3_reportStatus(3);
		}else if (overFlow){
		sensor.sensor3_reportStatus(4);
		}
		self.tank3_status() after(timingInterval);
	}
	msgsrv tank3_waterIncrease(){	
		if (low) { 
			low = false;
			high = true;
		} else if (high) { 
			high = false;
			overFlow = true;
		}
		
	}
	msgsrv tank3_waterDecrease(){	
		if (high) {
			high = false;
			low = true;
			tank2.tank2_waterIncrease();
		} else if (low) { 
			low = false;
			underFlow = true;
		}
		
	}
}


reactiveclass sensorTank1(10){
	knownrebecs{
		Tank1	tank1;
		PLC1	plc1;
	}
	sensorTank1(boolean compromised, int compTime, int msg){
		if (compromised) {
			self.sensor1_reportStatus(msg) after(compTime);
		}
	}
	msgsrv sensor1_reportStatus(int waterLevel) {	
		plc1.plc1_getsense(waterLevel);
	}
}



reactiveclass sensorTank2(10){
	knownrebecs{
		Tank2	tank2;
		PLC2	plc2;
	}
	sensorTank2(boolean compromised, int compTime, int msg){
		if (compromised) {
			self.sensor2_reportStatus(msg) after(compTime);
		}
	}
	msgsrv sensor2_reportStatus(int waterLevel) {	
		plc2.plc2_getsense(waterLevel);
	}
	

}

reactiveclass sensorTank3(10){
	knownrebecs{
		Tank3	tank3;
		PLC3	plc3;
	}
	sensorTank3(boolean compromised, int compTime, int msg){
		if (compromised) {
			self.sensor3_reportStatus(msg) after(compTime);
		}
	}
	msgsrv sensor3_reportStatus(int waterLevel) {	
		plc3.plc3_getsense(waterLevel);
	}

}


reactiveclass Pump1(10){
	knownrebecs{
		Tank1 tank1;
	}
	statevars{
		boolean pump1_on;
	}
	Pump1(boolean compromised, int compTime, int msg){
	 	pump1_on = false;
	 	if(compromised) {
	 		if(msg == 1){self.pump1_on();} else {self.pump1_off();}
	 	} 
	}
	msgsrv pump1_on(){	
		pump1_on = true;
		tank1.tank1_waterIncrease(); 
	}
	@priority(2)
	msgsrv pump1_keepOnpumping(){
		if(pump1_on) {
			tank1.tank1_waterIncrease(); 
		}
	}
	@priority(1)
	msgsrv pump1_off(){
		pump1_on = false;	
	}

}


reactiveclass Valve(10){
	knownrebecs{
		Tank1 tank1;
	}
	statevars{
		boolean valve_open;
	}
	Valve(boolean compromised, int compTime, int msg){
	 	valve_open = false;
	 	if(compromised) {
	 		if(msg == 1){self.valve_open();} else {self.valve_close();}
	 	} 
	}
	msgsrv valve_open(){	
		valve_open = true;
		tank1.tank1_waterDecrease();
	}
	@priority(2)
	msgsrv valve_keepOnWaterFlow(){
		if(valve_open) {
			tank1.tank1_waterDecrease();
		}
	}
	@priority(1)
	msgsrv valve_close(){
		valve_open = false;
	}

}

reactiveclass Pump2(10){
	knownrebecs{
		Tank3 tank3;
	}
	statevars{
		boolean pump2_on;
	}
	Pump2(boolean compromised, int compTime, int msg){
	 	pump2_on = false;
	 	if(compromised) {
	 		if(msg == 1){self.pump2_on();} else {self.pump2_off();}
	 	} 
	}
	@priority(2)
	msgsrv pump2_on(){	
			pump2_on = true;
			tank3.tank3_waterDecrease();
	}
	@priority(1)
	msgsrv pump2_off(){
		pump2_on = false;	
	}

}


reactiveclass reverseUnit(5){
	knownrebecs{
		Tank2 tank2;
	}
	statevars {
		boolean drinkableWater;
	}
	reverseUnit(){
		drinkableWater = false;
	}
	msgsrv cleanWater(){
		drinkableWater = true;
		tank2.tank2_waterDecrease();
	}
}


//--------------------------Attacker------------------------------------
// It injects faalse messages and commands in the channels between plc and sensor/actuator (valve or pumps)

/*

ch:1,2,3
	maliciousMsg for sensor: 
		the value between (1,2, 3) 
	attackTime: 
		the value is (0,10,20,30,...,70)
ch:4,5,6	
	maliciousMsg for valve: 
		the value is 0 (close) or 1 (open)
	maliciousMsg for pump: 
		is the value is 0 (off) or 1 (on)
	attackTime: 
		the value is (0,10,20,30,...,70)	
	*/


reactiveclass Attacker(3){
	knownrebecs{
		PLC1	plc1;
		PLC2	plc2;
		PLC3	plc3;
		Pump1	pump1;
		Pump2	pump2;
		Valve	valve;
	}
	Attacker(boolean inj, int channel, int maliciousMsg, int attackTime) {
	 if(inj){
	 	if (channel == 1) { 
	 		self.channelPlc1S(maliciousMsg, attackTime);
	 	}else if (channel == 2) {
	 		self.channelPlc2S(maliciousMsg, attackTime);
	 	}else if (channel == 3) {
	 		self.channelPlc3S(maliciousMsg, attackTime);
	 	}else if (channel == 4) {
	 		self.channelPlc1P1(maliciousMsg, attackTime);
	 	}else if (channel == 5) {
	 		self.channelPlc1V(maliciousMsg, attackTime);
	 	}else if (channel == 6) {
	 		self.channelPlc3P2(maliciousMsg, attackTime);
	 	}
	 }	 	
	}
	msgsrv channelPlc1S(int msg, int attackTime){	
		plc1.plc1_getsense(msg) after(attackTime);	
	}
	msgsrv channelPlc1P1(int msg, int attackTime){ 
		if(msg == 1) {
			pump1.pump1_on() after(attackTime);
		}else if(msg == 0) {
			pump1.pump1_off() after(attackTime);	
		}
	}
	msgsrv channelPlc1V(int msg, int attackTime){	
		if(msg == 1) {
			valve.valve_open() after(attackTime);
		}else if(msg == 0) {
			valve.valve_close() after(attackTime);	
		}
	}
	msgsrv channelPlc2S(int msg, int attackTime){	
		plc2.plc2_getsense(msg) after(attackTime);	
	}
	msgsrv channelPlc3P2(int msg, int attackTime){	
		if(msg == 1) {
			pump2.pump2_on() after(attackTime);
		}else if(msg == 0) {
			pump2.pump2_off() after(attackTime);	
		}
	}
	msgsrv channelPlc3S(int msg, int attackTime){
		plc3.plc3_getsense(msg) after(attackTime);	
	}
}



main{
	@priority(2) PLC1 plc1(pump1, valve):();				
	@priority(1) PLC2 plc2(plc1, plc3):();
	@priority(2) PLC3 plc3(pump2):();
	
	@priority(4) Pump1 pump1(tank1):(p1Comp,p1Comp_time,p1malMsg);
	@priority(4) Pump2 pump2(tank3):(p2Comp,p2Comp_time,p2malMsg);
	@priority(4) Valve valve(tank1):(vComp,vComp_time,vmalMsg);						
	@priority(4) reverseUnit unit(tank2):();
	
	@priority(2) Tank1 tank1(sensor1, tank2, valve):();				
	@priority(2) Tank2 tank2(sensor2, tank3, tank1, unit):();
	@priority(2) Tank3 tank3(sensor3, tank2):();
	
	@priority(3) sensorTank1 sensor1(tank1, plc1):(s1Comp,s1Comp_time,s1malMsg);
	@priority(3) sensorTank2 sensor2(tank2, plc2):(s2Comp,s2Comp_time,s2malMsg);	
	@priority(3) sensorTank3 sensor3(tank3, plc3):(s3Comp,s3Comp_time,s3malMsg);
	
	Attacker attacker(plc1, plc2, plc3, pump1, pump2, valve):(inj_attk, chl, malMsg, attTime);
}
